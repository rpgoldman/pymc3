# Stubs for pymc3.math (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from theano import Op
from typing import Any, Optional

def kronecker(*Ks: Any): ...
def cartesian(*arrays: Any): ...
def kron_matrix_op(krons: Any, m: Any, op: Any): ...

kron_dot: Any
kron_solve_lower: Any

def flat_outer(a: Any, b: Any): ...
def kron_diag(*diags: Any): ...
def tround(*args: Any, **kwargs: Any): ...
def logsumexp(x: Any, axis: Optional[Any] = ...): ...
def logaddexp(a: Any, b: Any): ...
def logdiffexp(a: Any, b: Any): ...
def invlogit(x: Any, eps: Any = ...): ...
def logit(p: Any): ...
def log1pexp(x: Any): ...
def log1mexp(x: Any): ...
def flatten_list(tensors: Any): ...

class LogDet(Op):
    def make_node(self, x: Any): ...
    def perform(self, node: Any, inputs: Any, outputs: Any, params: Optional[Any] = ...) -> None: ...
    def grad(self, inputs: Any, g_outputs: Any): ...
    def __str__(self): ...

logdet: Any

def probit(p: Any): ...
def invprobit(x: Any): ...
def expand_packed_triangular(n: Any, packed: Any, lower: bool = ..., diagonal_only: bool = ...): ...

class BatchedDiag(Op):
    __props__: Any = ...
    def make_node(self, diag: Any): ...
    def perform(self, node: Any, ins: Any, outs: Any, params: Optional[Any] = ...) -> None: ...
    def grad(self, inputs: Any, gout: Any): ...
    def infer_shape(self, nodes: Any, shapes: Any): ...

def batched_diag(C: Any): ...

class BlockDiagonalMatrix(Op):
    __props__: Any = ...
    sparse: Any = ...
    format: Any = ...
    def __init__(self, sparse: bool = ..., format: str = ...) -> None: ...
    def make_node(self, *matrices: Any): ...
    def perform(self, node: Any, inputs: Any, output_storage: Any, params: Optional[Any] = ...) -> None: ...
    def grad(self, inputs: Any, gout: Any): ...
    def infer_shape(self, nodes: Any, shapes: Any): ...

def block_diagonal(matrices: Any, sparse: bool = ..., format: str = ...): ...
