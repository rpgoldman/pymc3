# Stubs for pymc3.variational.approximations (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pymc3.variational.opvi import Approximation, Group
from typing import Any, Optional

class MeanFieldGroup(Group):
    __param_spec__: Any = ...
    short_name: str = ...
    alias_names: Any = ...
    def mean(self): ...
    def rho(self): ...
    def cov(self): ...
    def std(self): ...
    shared_params: Any = ...
    def __init_group__(self, group: Any) -> None: ...
    def create_shared_params(self, start: Optional[Any] = ...): ...
    def symbolic_random(self): ...
    def symbolic_logq_not_scaled(self): ...

class FullRankGroup(Group):
    __param_spec__: Any = ...
    short_name: str = ...
    alias_names: Any = ...
    shared_params: Any = ...
    def __init_group__(self, group: Any) -> None: ...
    def create_shared_params(self, start: Optional[Any] = ...): ...
    def L(self): ...
    def mean(self): ...
    def cov(self): ...
    def std(self): ...
    @property
    def num_tril_entries(self): ...
    @property
    def tril_indices(self): ...
    def symbolic_logq_not_scaled(self): ...
    def symbolic_random(self): ...

class EmpiricalGroup(Group):
    supports_batched: bool = ...
    has_logq: bool = ...
    __param_spec__: Any = ...
    short_name: str = ...
    shared_params: Any = ...
    def __init_group__(self, group: Any) -> None: ...
    def create_shared_params(self, trace: Optional[Any] = ..., size: Optional[Any] = ..., jitter: int = ..., start: Optional[Any] = ...): ...
    def _check_trace(self) -> None: ...
    def randidx(self, size: Optional[Any] = ...): ...
    def _new_initial(self, size: Any, deterministic: Any, more_replacements: Optional[Any] = ...): ...
    @property
    def symbolic_random(self): ...
    @property
    def histogram(self): ...
    def mean(self): ...
    def cov(self): ...
    def std(self): ...
    def __str__(self): ...

class NormalizingFlowGroup(Group):
    default_flow: str = ...
    flow: Any = ...
    def __init_group__(self, group: Any) -> None: ...
    def _check_user_params(self, **kwargs: Any): ...
    @property
    def shared_params(self): ...
    @shared_params.setter
    def shared_params(self, value: Any) -> None: ...
    @property
    def params(self): ...
    def symbolic_logq_not_scaled(self): ...
    @property
    def symbolic_random(self): ...
    def bdim(self): ...
    # the following has inconsistent typing wrt its parent.
    # @classmethod
    # def get_param_spec_for(cls, flow: Any, **kwargs: Any): ...

def sample_approx(approx: Any, draws: int = ..., include_transformed: bool = ...): ...

class SingleGroupApproximation(Approximation):
    _group_class: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, item: Any): ...
    def __dir__(self): ...

class MeanField(SingleGroupApproximation):
    __doc__: Any = ...
    _group_class: Any = ...

class FullRank(SingleGroupApproximation):
    __doc__: Any = ...
    _group_class: Any = ...

class Empirical(SingleGroupApproximation):
    __doc__: Any = ...
    _group_class: Any = ...
    def __init__(self, trace: Optional[Any] = ..., size: Optional[Any] = ..., **kwargs: Any) -> None: ...

class NormalizingFlow(SingleGroupApproximation):
    __doc__: Any = ...
    _group_class: Any = ...
    def __init__(self, flow: Any = ..., *args: Any, **kwargs: Any) -> None: ...
