# Stubs for pymc3.variational.flows (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..memoize import WithMemoization
from typing import Any, Optional

class Formula:
    formula: Any = ...
    flows: Any = ...
    def __init__(self, formula: Any) -> None: ...
    def __call__(self, z0: Optional[Any] = ..., dim: Optional[Any] = ..., jitter: float = ..., params: Optional[Any] = ..., batch_size: Optional[Any] = ...): ...
    def __reduce__(self): ...
    def __latex__(self): ...
    __repr__: Any = ...
    _latex_repr_: Any = ...
    def get_param_spec_for(self, **kwargs: Any): ...

class AbstractFlow(WithMemoization):
    shared_params: Any = ...
    __param_spec__: Any = ...
    short_name: str = ...
    __param_registry: Any = ...
    __name_registry: Any = ...
    @classmethod
    def register(cls, sbcls: Any): ...
    @classmethod
    def flow_for_params(cls, params: Any): ...
    @classmethod
    def flow_for_short_name(cls, name: Any): ...
    local: Any = ...
    batch_size: Any = ...
    __jitter: Any = ...
    dim: Any = ...
    z0: Any = ...
    parent: Any = ...
    def __init__(self, z0: Optional[Any] = ..., dim: Optional[Any] = ..., jitter: float = ..., batch_size: Optional[Any] = ..., local: bool = ...) -> None: ...
    def add_param(self, user: Optional[Any] = ..., name: Optional[Any] = ..., ref: float = ..., dtype: str = ...): ...
    @property
    def params(self): ...
    @property
    def all_params(self): ...
    @property
    def sum_logdets(self): ...
    def forward(self) -> None: ...
    def logdet(self) -> None: ...
    def forward_pass(self, z0: Any): ...
    __call__: Any = ...
    @property
    def root(self): ...
    @property
    def formula(self): ...
    @property
    def isroot(self): ...
    @property
    def batched(self): ...
    @classmethod
    def get_param_spec_for(cls, **kwargs: Any): ...
    def __repr__(self): ...
    def __str__(self): ...

class FlowFn:
    @staticmethod
    def fn(*args: Any) -> None: ...
    @staticmethod
    def inv(*args: Any) -> None: ...
    @staticmethod
    def deriv(*args: Any) -> None: ...
    def __call__(self, *args: Any): ...

class LinearFlow(AbstractFlow):
    __param_spec__: Any = ...
    h: Any = ...
    shared_params: Any = ...
    def __init__(self, h: Any, u: Optional[Any] = ..., w: Optional[Any] = ..., b: Optional[Any] = ..., **kwargs: Any) -> None: ...
    u: Any = ...
    w: Any = ...
    b: Any = ...
    def make_uw(self, u: Any, w: Any) -> None: ...
    def forward(self): ...
    def logdet(self): ...

class Tanh(FlowFn):
    fn: Any = ...
    inv: Any = ...
    @staticmethod
    def deriv(*args: Any): ...

class PlanarFlow(LinearFlow):
    short_name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def make_uw(self, u: Any, w: Any): ...

class ReferencePointFlow(AbstractFlow):
    __param_spec__: Any = ...
    h: Any = ...
    shared_params: Any = ...
    def __init__(self, h: Any, a: Optional[Any] = ..., b: Optional[Any] = ..., z_ref: Optional[Any] = ..., **kwargs: Any) -> None: ...
    a: Any = ...
    b: Any = ...
    z_ref: Any = ...
    def make_ab(self, a: Any, b: Any) -> None: ...
    def forward(self): ...
    def logdet(self): ...

class Radial(FlowFn):
    @staticmethod
    def fn(*args: Any): ...
    @staticmethod
    def inv(*args: Any): ...
    @staticmethod
    def deriv(*args: Any): ...

class RadialFlow(ReferencePointFlow):
    short_name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def make_ab(self, a: Any, b: Any): ...

class LocFlow(AbstractFlow):
    __param_spec__: Any = ...
    short_name: str = ...
    shared_params: Any = ...
    def __init__(self, loc: Optional[Any] = ..., **kwargs: Any) -> None: ...
    loc: Any = ...
    def forward(self): ...
    def logdet(self): ...

class ScaleFlow(AbstractFlow):
    __param_spec__: Any = ...
    short_name: str = ...
    scale: Any = ...
    shared_params: Any = ...
    def __init__(self, rho: Optional[Any] = ..., **kwargs: Any) -> None: ...
    log_scale: Any = ...
    def forward(self): ...
    def logdet(self): ...

class HouseholderFlow(AbstractFlow):
    __param_spec__: Any = ...
    short_name: str = ...
    shared_params: Any = ...
    H: Any = ...
    def __init__(self, v: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def forward(self): ...
    def logdet(self): ...
