# Stubs for pymc3.variational.inference (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from typing import Any, Optional

State = namedtuple('State', 'i,step,callbacks,score')

class Inference:
    hist: Any = ...
    objective: Any = ...
    state: Any = ...
    def __init__(self, op: Any, approx: Any, tf: Any, **kwargs: Any) -> None: ...
    approx: Any = ...
    def _maybe_score(self, score: Any): ...
    def run_profiling(self, n: int = ..., score: Optional[Any] = ..., **kwargs: Any): ...
    def fit(self, n: int = ..., score: Optional[Any] = ..., callbacks: Optional[Any] = ..., progressbar: bool = ..., **kwargs: Any): ...
    def _iterate_without_loss(self, s: Any, _: Any, step_func: Any, progress: Any, callbacks: Any): ...
    def _iterate_with_loss(self, s: Any, n: Any, step_func: Any, progress: Any, callbacks: Any): ...
    def refine(self, n: Any, progressbar: bool = ...) -> None: ...

class KLqp(Inference):
    def __init__(self, approx: Any, beta: float = ...) -> None: ...

class ADVI(KLqp):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class FullRankADVI(KLqp):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class ImplicitGradient(Inference):
    def __init__(self, approx: Any, estimator: Any = ..., kernel: Any = ..., **kwargs: Any) -> None: ...

class SVGD(ImplicitGradient):
    def __init__(self, n_particles: int = ..., jitter: int = ..., model: Optional[Any] = ..., start: Optional[Any] = ..., random_seed: Optional[Any] = ..., estimator: Any = ..., kernel: Any = ..., **kwargs: Any) -> None: ...

class ASVGD(ImplicitGradient):
    def __init__(self, approx: Optional[Any] = ..., estimator: Any = ..., kernel: Any = ..., **kwargs: Any) -> None: ...
    def fit(self, n: int = ..., score: Optional[Any] = ..., callbacks: Optional[Any] = ..., progressbar: bool = ..., obj_n_mc: int = ..., **kwargs: Any): ...
    def run_profiling(self, n: int = ..., score: Optional[Any] = ..., obj_n_mc: int = ..., **kwargs: Any): ...

class NFVI(KLqp):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

def fit(n: int = ..., local_rv: Optional[Any] = ..., method: str = ..., model: Optional[Any] = ..., random_seed: Optional[Any] = ..., start: Optional[Any] = ..., inf_kwargs: Optional[Any] = ..., **kwargs: Any): ...
