# Stubs for pymc3.distributions.discrete (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .distribution import Discrete
from typing import Any, Optional

class Binomial(Discrete):
    n: Any = ...
    p: Any = ...
    mode: Any = ...
    def __init__(self, name:str, n: Any, p: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class BetaBinomial(Discrete):
    alpha: Any = ...
    beta: Any = ...
    n: Any = ...
    mode: Any = ...
    def __init__(self, name:str, alpha: Any, beta: Any, n: Any, *args: Any, **kwargs: Any) -> None: ...
    def _random(self, alpha: Any, beta: Any, n: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Bernoulli(Discrete):
    _is_logit: bool = ...
    p: Any = ...
    _logit_p: Any = ...
    mode: Any = ...
    def __init__(self, name:str, p: Optional[Any] = ..., logit_p: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class DiscreteWeibull(Discrete):
    q: Any = ...
    beta: Any = ...
    median: Any = ...
    def __init__(self, name:str, q: Any, beta: Any, *args: Any, **kwargs: Any) -> None: ...

    def _ppf(self, p: Any): ...
    def _random(self, q: Any, beta: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Poisson(Discrete):
    mu: Any = ...
    mode: Any = ...
    def __init__(self, name:str, mu: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class NegativeBinomial(Discrete):
    mu: Any = ...
    alpha: Any = ...
    mode: Any = ...
    def __init__(self, name:str, mu: Any, alpha: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Geometric(Discrete):
    p: Any = ...
    mode: int = ...
    def __init__(self, name:str, p: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class DiscreteUniform(Discrete):
    lower: Any = ...
    upper: Any = ...
    mode: Any = ...
    def __init__(self, name:str, lower: Any, upper: Any, *args: Any, **kwargs: Any) -> None: ...
    def _random(self, lower: Any, upper: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Categorical(Discrete):
    k: Any = ...
    p: Any = ...
    mode: Any = ...
    def __init__(self, name:str, p: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Constant(Discrete):
    mean: Any = ...
    def __init__(self, name:str, c: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


ConstantDist = Constant

class ZeroInflatedPoisson(Discrete):
    theta: Any = ...
    psi: Any = ...
    pois: Any = ...
    mode: Any = ...
    def __init__(self, name:str, psi: Any, theta: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class ZeroInflatedBinomial(Discrete):
    n: Any = ...
    p: Any = ...
    psi: Any = ...
    bin: Any = ...
    mode: Any = ...
    def __init__(self, name:str, psi: Any, n: Any, p: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class ZeroInflatedNegativeBinomial(Discrete):
    mu: Any = ...
    alpha: Any = ...
    psi: Any = ...
    nb: Any = ...
    mode: Any = ...
    def __init__(self, name:str, psi: Any, mu: Any, alpha: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class OrderedLogistic(Categorical):
    eta: Any = ...
    cutpoints: Any = ...
    def __init__(self, name:str, eta: Any, cutpoints: Any, *args: Any, **kwargs: Any) -> None: ...

