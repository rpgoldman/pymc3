# Stubs for pymc3.distributions.multivariate (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import theano.tensor
from .distribution import Continuous, Discrete
from typing import Any, Optional

class _QuadFormBase(Continuous):
    mu: Any = ...
    solve_lower: Any = ...
    k: Any = ...
    _cov_type: str = ...
    chol_cov: Any = ...
    cov: Any = ...
    _n: Any = ...
    chol_tau: Any = ...
    tau: Any = ...
    def __init__(self, mu: Optional[Any] = ..., cov: Optional[Any] = ..., chol: Optional[Any] = ..., tau: Optional[Any] = ..., lower: bool = ..., *args: Any, **kwargs: Any) -> None: ...
    def _quaddist(self, value: Any): ...
    def _quaddist_chol(self, delta: Any): ...
    def _quaddist_cov(self, delta: Any): ...
    def _quaddist_tau(self, delta: Any): ...
    def _repr_cov_params(self, dist: Optional[Any] = ...): ...

class MvNormal(_QuadFormBase):
    mean: Any = ...
    def __init__(self, mu: Any, cov: Optional[Any] = ..., tau: Optional[Any] = ..., chol: Optional[Any] = ..., lower: bool = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def logp(self, value: Any): ...
    def _repr_latex_(self, name: Optional[Any] = ..., dist: Optional[Any] = ...): ...

class MvStudentT(_QuadFormBase):
    nu: Any = ...
    mean: Any = ...
    def __init__(self, nu: Any, Sigma: Optional[Any] = ..., mu: Optional[Any] = ..., cov: Optional[Any] = ..., tau: Optional[Any] = ..., chol: Optional[Any] = ..., lower: bool = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def logp(self, value: Any): ...
    def _repr_latex_(self, name: Optional[Any] = ..., dist: Optional[Any] = ...): ...

class Dirichlet(Continuous):
    size_prefix: Any = ...
    k: Any = ...
    a: Any = ...
    mean: Any = ...
    mode: Any = ...
    def __init__(self, a: Any, transform: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def _random(self, a: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def logp(self, value: Any): ...
    def _repr_latex_(self, name: Optional[Any] = ..., dist: Optional[Any] = ...): ...

class Multinomial(Discrete):
    n: Any = ...
    p: Any = ...
    mean: Any = ...
    mode: Any = ...
    def __init__(self, n: Any, p: Any, *args: Any, **kwargs: Any) -> None: ...
    def _random(self, n: Any, p: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def logp(self, x: Any): ...
    def _repr_latex_(self, name: Optional[Any] = ..., dist: Optional[Any] = ...): ...

class PosDefMatrix(theano.Op):
    __props__: Any = ...
    def make_node(self, x: Any): ...
    def perform(self, node: Any, inputs: Any, outputs: Any) -> None: ...
    def infer_shape(self, node: Any, shapes: Any): ...
    def grad(self, inp: Any, grads: Any): ...
    def __str__(self): ...

class Wishart(Continuous):
    nu: Any = ...
    p: Any = ...
    V: Any = ...
    mean: Any = ...
    mode: Any = ...
    def __init__(self, nu: Any, V: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def logp(self, X: Any): ...
    def _repr_latex_(self, name: Optional[Any] = ..., dist: Optional[Any] = ...): ...

def WishartBartlett(name: Any, S: Any, nu: Any, is_cholesky: bool = ..., return_cholesky: bool = ..., testval: Optional[Any] = ...): ...

class LKJCholeskyCov(Continuous):
    n: Any = ...
    eta: Any = ...
    sd_dist: Any = ...
    diag_idxs: Any = ...
    mode: Any = ...
    def __init__(self, eta: Any, n: Any, sd_dist: Any, *args: Any, **kwargs: Any) -> None: ...
    def logp(self, x: Any): ...

class LKJCorr(Continuous):
    n: Any = ...
    eta: Any = ...
    mean: Any = ...
    tri_index: Any = ...
    def __init__(self, eta: Optional[Any] = ..., n: Optional[Any] = ..., p: Optional[Any] = ..., transform: str = ..., *args: Any, **kwargs: Any) -> None: ...
    def _random(self, n: Any, eta: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def logp(self, x: Any): ...

class MatrixNormal(Continuous):
    shape: Any = ...
    mu: Any = ...
    mean: Any = ...
    solve_lower: Any = ...
    solve_upper: Any = ...
    def __init__(self, mu: int = ..., rowcov: Optional[Any] = ..., rowchol: Optional[Any] = ..., rowtau: Optional[Any] = ..., colcov: Optional[Any] = ..., colchol: Optional[Any] = ..., coltau: Optional[Any] = ..., shape: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    m: Any = ...
    _rowcov_type: str = ...
    rowchol_cov: Any = ...
    rowcov: Any = ...
    rowchol_tau: Any = ...
    rowtau: Any = ...
    n: Any = ...
    _colcov_type: str = ...
    colchol_cov: Any = ...
    colcov: Any = ...
    colchol_tau: Any = ...
    coltau: Any = ...
    def _setup_matrices(self, colcov: Any, colchol: Any, coltau: Any, rowcov: Any, rowchol: Any, rowtau: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def _trquaddist(self, value: Any): ...
    def logp(self, value: Any): ...

class KroneckerNormal(Continuous):
    mu: Any = ...
    mean: Any = ...
    def __init__(self, mu: Any, covs: Optional[Any] = ..., chols: Optional[Any] = ..., evds: Optional[Any] = ..., sigma: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    cholesky: Any = ...
    _isEVD: bool = ...
    sigma: Any = ...
    is_noisy: Any = ...
    _cov_type: str = ...
    covs: Any = ...
    chols: Any = ...
    chol_diags: Any = ...
    sizes: Any = ...
    N: Any = ...
    def _setup(self, covs: Any, chols: Any, evds: Any, sigma: Any) -> None: ...
    Qs: Any = ...
    QTs: Any = ...
    eigs_sep: Any = ...
    eigs: Any = ...
    def _setup_evd(self, eigh_iterable: Any) -> None: ...
    mv_params: Any = ...
    def _setup_random(self) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
    def _quaddist(self, value: Any): ...
    def logp(self, value: Any): ...
