# Stubs for pymc3.distributions.transforms (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import distribution
from typing import Any, Optional

class Transform:
    name: str = ...
    def forward(self, x: Any) -> None: ...
    def forward_val(self, x: Any, point: Any) -> None: ...
    def backward(self, z: Any) -> None: ...
    def jacobian_det(self, x: Any) -> None: ...
    def apply(self, dist: Any): ...
    def __str__(self): ...

class ElemwiseTransform(Transform):
    def jacobian_det(self, x: Any): ...

class TransformedDistribution(distribution.Distribution):
    dist: Any = ...
    transform_used: Any = ...
    type: Any = ...
    def __init__(self, dist: Any, transform: Any, *args: Any, **kwargs: Any) -> None: ...
    def logp(self, x: Any): ...
    def logp_nojac(self, x: Any): ...
transform = Transform

class Log(ElemwiseTransform):
    name: str = ...
    def backward(self, x: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...

log: Any

class LogExpM1(ElemwiseTransform):
    name: str = ...
    def backward(self, x: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...

log_exp_m1: Any

class LogOdds(ElemwiseTransform):
    name: str = ...
    def backward(self, x: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...

logodds: Any

class Interval(ElemwiseTransform):
    name: str = ...
    a: Any = ...
    b: Any = ...
    def __init__(self, a: Any, b: Any) -> None: ...
    def backward(self, x: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...
interval = Interval

class LowerBound(ElemwiseTransform):
    name: str = ...
    a: Any = ...
    def __init__(self, a: Any) -> None: ...
    def backward(self, x: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...
lowerbound = LowerBound

class UpperBound(ElemwiseTransform):
    name: str = ...
    b: Any = ...
    def __init__(self, b: Any) -> None: ...
    def backward(self, x: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...
upperbound = UpperBound

class Ordered(Transform):
    name: str = ...
    def backward(self, y: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, y: Any): ...

ordered: Any

class SumTo1(Transform):
    name: str = ...
    def backward(self, y: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...

sum_to_1: Any

class StickBreaking(Transform):
    name: str = ...
    eps: Any = ...
    def __init__(self, eps: Any = ...) -> None: ...
    def forward(self, x_: Any): ...
    def forward_val(self, x_: Any, point: Optional[Any] = ...): ...
    def backward(self, y_: Any): ...
    def jacobian_det(self, y_: Any): ...

stick_breaking: Any
t_stick_breaking: Any

class Circular(ElemwiseTransform):
    name: str = ...
    def backward(self, y: Any): ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, x: Any): ...

class CholeskyCovPacked(Transform):
    name: str = ...
    diag_idxs: Any = ...
    def __init__(self, n: Any) -> None: ...
    def backward(self, x: Any): ...
    def forward(self, y: Any): ...
    def forward_val(self, y: Any, point: Optional[Any] = ...): ...
    def jacobian_det(self, y: Any): ...

class Chain(Transform):
    transform_list: Any = ...
    name: Any = ...
    def __init__(self, transform_list: Any) -> None: ...
    def forward(self, x: Any): ...
    def forward_val(self, x: Any, point: Optional[Any] = ...): ...
    def backward(self, y: Any): ...
    def jacobian_det(self, y: Any): ...
