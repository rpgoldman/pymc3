# Stubs for pymc3.distributions.distribution (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
from theano import TensorVariable
from typing import Any, Optional, Tuple, Union
from numpy import dtype

class _Unpickling: ...

# I *think* it is correct to treat a distribution as a tensor
# variable, as a way of making addition, multiplication, etc. work
# out.
class Distribution (TensorVariable):
    def __new__(cls, name: Any, *args: Any, **kwargs: Any): ...
    def __getnewargs__(self): ...
    def __getitem__(self, index: Union[int,Tuple[int,...]]) -> TensorVariable: ...
    @classmethod
    def dist(cls, *args: Any, **kwargs: Any): ...
    shape: Any = ...
    dtype: Any = ...
    type: Any = ...
    testval: Any = ...
    defaults: Any = ...
    transform: Any = ...
    name: str
    def __init__(self, shape: Any, dtype: Any, testval: Optional[Any] = ..., defaults: Any = ..., transform: Optional[Any] = ..., broadcastable: Optional[Any] = ...) -> None: ...
    def default(self): ...
    def get_test_val(self, val: Any, defaults: Any): ...
    def getattr_value(self, val: Any): ...
    def _repr_latex_(self, name: Optional[Any] = ..., dist: Optional[Any] = ...) -> str: ...
    def logp(self, value:Any) -> TensorVariable: ...
    # default method...
    # def logp_nojac(self, *args: Any, **kwargs: Any): ...
    def logp_sum(self, *args: Any, **kwargs: Any): ...
    __latex__: Any = ...

def TensorType(dtype: Any, shape: Any, broadcastable: Optional[Any] = ...): ...

class NoDistribution(Distribution):
    parent_dist: Any = ...
    def __init__(self, shape: Any, dtype: Any, testval: Optional[Any] = ..., defaults: Any = ..., transform: Optional[Any] = ..., parent_dist: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: Any): ...


class Discrete(Distribution):
    def __init__(self, shape: Any = ..., dtype: Optional[Any] = ..., defaults: Any = ..., *args: Any, **kwargs: Any) -> None: ...

class Continuous(Distribution):
    def __init__(self, shape: Any = ..., dtype: Optional[Any] = ..., defaults: Any = ..., *args: Any, **kwargs: Any) -> None: ...

class DensityDist(Distribution):
    logp: Any = ...
    rand: Any = ...
    def __init__(self, logp: Any, shape: Any = ..., dtype: Optional[Any] = ..., testval: int = ..., random: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, *args: Any, **kwargs: Any): ...

def draw_values(params: Any, point: Optional[Any] = ..., size: Optional[Any] = ...): ...
def generate_samples(generator: Any, *args: Any, **kwargs: Any): ...

def TensorType(dtype: dtype, shape: Tuple[int,...], broadcastable: Optional[Any]=None) -> Any: ...
