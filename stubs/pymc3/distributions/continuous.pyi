# Stubs for pymc3.distributions.continuous (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .distribution import Continuous
from typing import Any, Optional, Union, Tuple
from theano import TensorVariable

class PositiveContinuous(Continuous):
    def __init__(self, name:str, transform: Any = ..., *args: Any, **kwargs: Any) -> None: ...

class UnitContinuous(Continuous):
    def __init__(self, name:str, transform: Any = ..., *args: Any, **kwargs: Any) -> None: ...

class BoundedContinuous(Continuous):
    def __init__(self, name:str, transform: str = ..., lower: Optional[Any] = ..., upper: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...

class Uniform(BoundedContinuous):
    lower: float = ...
    upper: float = ...
    mean: float = ...
    median: float = ...
    def __init__(self, name:str, lower: float = ..., upper: float = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Flat(Continuous):
    _default: int = ...
    def __init__(self, name:str, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...) -> None: ...


class HalfFlat(PositiveContinuous):
    _default: int = ...
    def __init__(self, name:str, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...) -> None: ...


class Normal(Continuous):
    sd: Any = ...
    tau: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name: str, mu: int = ..., sd: Optional[Any] = ..., tau: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class TruncatedNormal(BoundedContinuous):
    sd: Any = ...
    tau: Any = ...
    lower: Any = ...
    upper: Any = ...
    mu: Any = ...
    _defaultval: Any = ...
    def __init__(self, name:str, __mu: int = ..., sd: Optional[Any] = ..., tau: Optional[Any] = ..., lower: Optional[Any] = ..., upper: Optional[Any] = ..., transform: str = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...

    def _normalization(self): ...

class HalfNormal(PositiveContinuous):
    sd: Any = ...
    tau: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, sd: Optional[Any] = ..., tau: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Wald(PositiveContinuous):
    alpha: Any = ...
    mu: Any = ...
    lam: Any = ...
    phi: Any = ...
    mean: Any = ...
    mode: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: Optional[Any] = ..., lam: Optional[Any] = ..., phi: Optional[Any] = ..., alpha: float = ..., *args: Any, **kwargs: Any) -> None: ...
    def get_mu_lam_phi(self, mu: Any, lam: Any, phi: Any): ...
    def _random(self, mu: Any, lam: Any, alpha: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Beta(UnitContinuous):
    alpha: Any = ...
    beta: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, alpha: Optional[Any] = ..., beta: Optional[Any] = ..., mu: Optional[Any] = ..., sd: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def get_alpha_beta(self, alpha: Optional[Any] = ..., beta: Optional[Any] = ..., mu: Optional[Any] = ..., sd: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Kumaraswamy(UnitContinuous):
    a: Any = ...
    b: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, a: Any, b: Any, *args: Any, **kwargs: Any) -> None: ...
    def _random(self, a: Any, b: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Exponential(PositiveContinuous):
    lam: Any = ...
    mean: Any = ...
    median: Any = ...
    mode: Any = ...
    variance: Any = ...
    def __init__(self, name:str, lam: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Laplace(Continuous):
    b: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: Any, b: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Lognormal(PositiveContinuous):
    mu: Any = ...
    tau: Any = ...
    sd: Any = ...
    mean: Any = ...
    median: Any = ...
    mode: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: int = ..., sd: Optional[Any] = ..., tau: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def _random(self, mu: Any, tau: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class StudentT(Continuous):
    nu: Any = ...
    lam: Any = ...
    sd: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, nu: Any, mu: int = ..., lam: Optional[Any] = ..., sd: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Pareto(Continuous):
    alpha: Any = ...
    m: Any = ...
    mean: Any = ...
    median: Any = ...
    variance: Any = ...
    def __init__(self, name:str, alpha: Any, m: Any, transform: str = ..., *args: Any, **kwargs: Any) -> None: ...
    def _random(self, alpha: Any, m: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Cauchy(Continuous):
    median: Any = ...
    beta: Any = ...
    def __init__(self, name:str, alpha: Any, beta: Any, *args: Any, **kwargs: Any) -> None: ...
    def _random(self, alpha: Any, beta: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class HalfCauchy(PositiveContinuous):
    mode: Any = ...
    median: Any = ...
    beta: Any = ...
    def __init__(self, name:str, beta: Union[float, TensorVariable], *args: Any, **kwargs: Any) -> None:
        ...
    def _random(self, beta: Any, size: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Gamma(PositiveContinuous):
    alpha: Any = ...
    beta: Any = ...
    mean: Any = ...
    mode: Any = ...
    variance: Any = ...
    def __init__(self, name:str, alpha: Optional[Any] = ..., beta: Optional[Any] = ..., mu: Optional[Any] = ..., sd: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def get_alpha_beta(self, alpha: Optional[Any] = ..., beta: Optional[Any] = ..., mu: Optional[Any] = ..., sd: Optional[Any] = ...): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class InverseGamma(PositiveContinuous):
    alpha: Any = ...
    beta: Any = ...
    mean: Any = ...
    mode: Any = ...
    variance: Any = ...
    def __init__(self, name:str, alpha: Optional[float]=...,
                 beta: Optional[float]=...,
                 mu: Optional[float]=...,
                 sd: Optional[float]=..., *args: Any, **kwargs: Any) -> None: ...
    def _calculate_mean(self): ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class ChiSquared(Gamma):
    nu: Any = ...
    def __init__(self, name:str, nu: Any, *args: Any, **kwargs: Any) -> None: ...

class Weibull(PositiveContinuous):
    alpha: Any = ...
    beta: Any = ...
    mean: Any = ...
    median: Any = ...
    variance: Any = ...
    mode: Any = ...
    def __init__(self, name:str, alpha: Any, beta: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class HalfStudentT(PositiveContinuous):
    mode: Any = ...
    median: Any = ...
    sd: Any = ...
    lam: Any = ...
    nu: Any = ...
    def __init__(self, name:str, nu: int = ..., sd: Optional[Any] = ..., lam: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class ExGaussian(Continuous):
    mu: Any = ...
    sigma: Any = ...
    nu: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: Any, sigma: Any, nu: Any, *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class VonMises(Continuous):
    mean: Any = ...
    kappa: Any = ...
    def __init__(self, name:str, mu: float = ..., kappa: Optional[Any] = ..., transform: str = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class SkewNormal(Continuous):
    mu: Any = ...
    tau: Any = ...
    sd: Any = ...
    alpha: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: float = ..., sd: Optional[Any] = ..., tau: Optional[Any] = ..., alpha: int = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Triangular(BoundedContinuous):
    median: Any = ...
    lower: Any = ...
    upper: Any = ...
    def __init__(self, name:str, lower: int = ..., upper: int = ..., c: float = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Gumbel(Continuous):
    mu: Any = ...
    beta: Any = ...
    mean: Any = ...
    median: Any = ...
    mode: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: int = ..., beta: float = ..., **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Rice(PositiveContinuous):
    nu: Any = ...
    sd: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, nu: Optional[Any] = ..., sd: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class Logistic(Continuous):
    mu: Any = ...
    s: Any = ...
    mean: Any = ...
    variance: Any = ...
    def __init__(self, name:str, mu: float = ..., s: float = ..., *args: Any, **kwargs: Any) -> None: ...

    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...


class LogitNormal(UnitContinuous):
    mu: Any = ...
    sd: Any = ...
    tau: Any = ...
    median: Any = ...
    def __init__(self, name:str, mu: int = ..., sd: Optional[Any] = ..., tau: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def random(self, point: Optional[Any] = ..., size: Optional[Any] = ...): ...



class Interpolated(BoundedContinuous):
    lower: Any = ...
    upper: Any = ...
    Z: Any = ...
    interp_op: Any = ...
    x_points: Any = ...
    pdf_points: Any = ...
    cdf_points: Any = ...
    median: Any = ...
    def __init__(self, name:str, x_points: Any, pdf_points: Any, *args: Any, **kwargs: Any) -> None: ...
    def _argcdf(self, p: Any): ...
    def _random(self, size: Optional[Any] = ...): ...
    def random(self, size: Optional[Any] = ...): ...


ArrayLike = Any

def get_tau_sd(tau: Optional[ArrayLike]=None, sd: Optional[ArrayLike]=None) -> Tuple[float,float]: ...
