# Stubs for pymc3.data (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import theano as tt
from typing import Any, Optional

def get_data(filename: Any): ...

class GenTensorVariable(tt.TensorVariable):
    op: Any = ...
    def __init__(self, op: Any, type: Any, name: Optional[Any] = ...) -> None: ...
    def set_gen(self, gen: Any) -> None: ...
    def set_default(self, value: Any) -> None: ...
    def clone(self): ...

class GeneratorAdapter:
    def make_variable(self, gop: Any, name: Optional[Any] = ...): ...
    test_value: Any = ...
    _yielded_test_value: bool = ...
    gen: Any = ...
    tensortype: Any = ...
    def __init__(self, generator: Any) -> None: ...
    def __next__(self): ...
    next: Any = ...
    def __iter__(self): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...

class Minibatch(tt.TensorVariable):
    RNG: Any = ...
    shared: Any = ...
    update_shared_f: Any = ...
    random_slc: Any = ...
    minibatch: Any = ...
    def __init__(self, data: Any, batch_size: int = ..., dtype: Optional[Any] = ..., broadcastable: Optional[Any] = ..., name: str = ..., random_seed: int = ..., update_shared_f: Optional[Any] = ..., in_memory_size: Optional[Any] = ...) -> None: ...
    def rslice(self, total: Any, size: Any, seed: Any): ...
    def __del__(self) -> None: ...
    @staticmethod
    def make_static_slices(user_size: Any): ...
    def make_random_slices(self, in_memory_shape: Any, batch_size: Any, default_random_seed: Any): ...
    def update_shared(self) -> None: ...
    def set_value(self, value: Any) -> None: ...
    def clone(self): ...

def align_minibatches(batches: Optional[Any] = ...) -> None: ...
