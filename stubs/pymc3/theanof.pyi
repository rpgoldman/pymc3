# Stubs for pymc3.theanof (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

#from theano import scalar
from theano import Op
from typing import Any, Optional

def inputvars(a: Any): ...
def cont_inputs(f: Any): ...
def floatX(X: Any): ...
def smartfloatX(x: Any): ...
def gradient(f: Any, vars: Optional[Any] = ...): ...
def jacobian(f: Any, vars: Optional[Any] = ...): ...
def hessian(f: Any, vars: Optional[Any] = ...): ...
def hessian_diag(f: Any, vars: Optional[Any] = ...): ...

# NOTE: Not sure whether or not the superclass is needed for accurate typechecking. [2018/11/13:rpg]
class IdentityOp: # (scalar.UnaryScalarOp):
    @staticmethod
    def st_impl(x: Any): ...
    def impl(self, x: Any): ...
    def grad(self, inp: Any, grads: Any): ...
    def c_code(self, node: Any, name: Any, inp: Any, out: Any, sub: Any): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...

def make_shared_replacements(vars: Any, model: Any): ...
def join_nonshared_inputs(xs: Any, vars: Any, shared: Any, make_shared: bool = ...): ...

class CallableTensor:
    tensor: Any = ...
    def __init__(self, tensor: Any) -> None: ...
    def __call__(self, input: Any): ...

class GeneratorOp(Op):
    __props__: Any = ...
    generator: Any = ...
    def __init__(self, gen: Any, default: Optional[Any] = ...) -> None: ...
    def make_node(self, *inputs: Any): ...
    def perform(self, node: Any, inputs: Any, output_storage: Any, params: Optional[Any] = ...) -> None: ...
    def do_constant_folding(self, node: Any): ...
    __call__: Any = ...
    def set_gen(self, gen: Any) -> None: ...
    default: Any = ...
    def set_default(self, value: Any) -> None: ...

def generator(gen: Any, default: Optional[Any] = ...): ...
def tt_rng(random_seed: Optional[Any] = ...): ...
def set_tt_rng(new_rng: Any) -> None: ...
