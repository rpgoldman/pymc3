# Stubs for pymc3.step_methods.hmc.base_hmc (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .quadpotential import QuadPotentialDiagAdapt, quad_potential
from collections import namedtuple
from pymc3.step_methods import arraystep
from typing import Any, Optional

HMCStepData = namedtuple('HMCStepData', 'end, accept_stat, divergence_info, stats')

DivergenceInfo = namedtuple('DivergenceInfo', 'message, exec_info, state')

class BaseHMC(arraystep.GradientSharedStep):
    default_blocked: bool = ...
    adapt_step_size: Any = ...
    Emax: Any = ...
    iter_count: int = ...
    step_size: Any = ...
    target_accept: Any = ...
    step_adapt: Any = ...
    tune: bool = ...
    potential: Any = ...
    integrator: Any = ...
    _step_rand: Any = ...
    _warnings: Any = ...
    _samples_after_tune: int = ...
    _num_divs_sample: int = ...
    def __init__(self, vars: Optional[Any] = ..., scaling: Optional[Any] = ..., step_scale: float = ..., is_cov: bool = ..., model: Optional[Any] = ..., blocked: bool = ..., potential: Optional[Any] = ..., integrator: str = ..., dtype: Optional[Any] = ..., Emax: int = ..., target_accept: float = ..., gamma: float = ..., k: float = ..., t0: int = ..., adapt_step_size: bool = ..., step_rand: Optional[Any] = ..., **theano_kwargs: Any) -> None: ...
    def _hamiltonian_step(self, start: Any, p0: Any, step_size: Any) -> None: ...
    def astep(self, q0: Any): ...
    def reset(self, start: Optional[Any] = ...) -> None: ...
    def warnings(self): ...
