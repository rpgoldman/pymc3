# Stubs for pymc3.step_methods.hmc.quadpotential (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def quad_potential(C: Any, is_cov: Any) -> QuadPotential: ...

class PositiveDefiniteError(ValueError):
    idx: Any = ...
    msg: Any = ...
    def __init__(self, msg: Any, idx: Any) -> None: ...
    def __str__(self): ...

class QuadPotential:
    def update(self, sample: Any, grad: Any, tune: Any) -> None: ...

def isquadpotential(value: Any) -> bool: ...

class QuadPotentialDiagAdapt(QuadPotential):
    dtype: Any = ...
    _n: Any = ...
    _var: Any = ...
    _var_theano: Any = ...
    _stds: Any = ...
    _inv_stds: Any = ...
    _foreground_var: Any = ...
    _background_var: Any = ...
    _n_samples: int = ...
    adaptation_window: Any = ...
    def __init__(self, n: Any, initial_mean: Any, initial_diag: Optional[Any] = ..., initial_weight: int = ..., adaptation_window: int = ..., dtype: Optional[Any] = ...) -> None: ...
    def velocity(self, x: Any, out: Optional[Any] = ...): ...
    def energy(self, x: Any, velocity: Optional[Any] = ...): ...
    def velocity_energy(self, x: Any, v_out: Any): ...
    def random(self): ...
    def _update_from_weightvar(self, weightvar: Any) -> None: ...
    def update(self, sample: Any, grad: Any, tune: Any): ...
    def raise_ok(self, vmap: Any) -> None: ...

class QuadPotentialDiagAdaptGrad(QuadPotentialDiagAdapt):
    _grads1: Any = ...
    _ngrads1: int = ...
    _grads2: Any = ...
    _ngrads2: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def _update(self, var: Any) -> None: ...
    def update(self, sample: Any, grad: Any, tune: Any): ...

class _WeightedVariance:
    _dtype: Any = ...
    w_sum: Any = ...
    w_sum2: Any = ...
    mean: Any = ...
    raw_var: Any = ...
    def __init__(self, nelem: Any, initial_mean: Optional[Any] = ..., initial_variance: Optional[Any] = ..., initial_weight: int = ..., dtype: str = ...) -> None: ...
    def add_sample(self, x: Any, weight: Any) -> None: ...
    def current_variance(self, out: Optional[Any] = ...): ...
    def current_mean(self): ...

class QuadPotentialDiag(QuadPotential):
    dtype: Any = ...
    s: Any = ...
    inv_s: Any = ...
    v: Any = ...
    def __init__(self, v: Any, dtype: Optional[Any] = ...) -> None: ...
    def velocity(self, x: Any, out: Optional[Any] = ...): ...
    def random(self): ...
    def energy(self, x: Any, velocity: Optional[Any] = ...): ...
    def velocity_energy(self, x: Any, v_out: Any): ...

class QuadPotentialFullInv(QuadPotential):
    dtype: Any = ...
    L: Any = ...
    def __init__(self, A: Any, dtype: Optional[Any] = ...) -> None: ...
    def velocity(self, x: Any, out: Optional[Any] = ...): ...
    def random(self): ...
    def energy(self, x: Any, velocity: Optional[Any] = ...): ...
    def velocity_energy(self, x: Any, v_out: Any): ...

class QuadPotentialFull(QuadPotential):
    dtype: Any = ...
    A: Any = ...
    L: Any = ...
    def __init__(self, A: Any, dtype: Optional[Any] = ...) -> None: ...
    def velocity(self, x: Any, out: Optional[Any] = ...): ...
    def random(self): ...
    def energy(self, x: Any, velocity: Optional[Any] = ...): ...
    def velocity_energy(self, x: Any, v_out: Any): ...
    __call__: Any = ...

class QuadPotentialSparse(QuadPotential):
    A: Any = ...
    size: Any = ...
    factor: Any = ...
    d_sqrt: Any = ...
    def __init__(self, A: Any) -> None: ...
    def velocity(self, x: Any): ...
    def random(self): ...
    def energy(self, x: Any): ...
