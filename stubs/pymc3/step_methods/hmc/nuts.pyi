# Stubs for pymc3.step_methods.hmc.nuts (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base_hmc import BaseHMC
from collections import namedtuple
from typing import Any, Optional

class NUTS(BaseHMC):
    name: str = ...
    default_blocked: bool = ...
    generates_stats: bool = ...
    stats_dtypes: Any = ...
    max_treedepth: Any = ...
    early_max_treedepth: Any = ...
    _reached_max_treedepth: int = ...
    def __init__(self, vars: Optional[Any] = ..., max_treedepth: int = ..., early_max_treedepth: int = ..., **kwargs: Any) -> None: ...
    def _hamiltonian_step(self, start: Any, p0: Any, step_size: Any): ...
    @staticmethod
    def competence(var: Any, has_grad: Any): ...
    def warnings(self): ...

Proposal = namedtuple('Proposal', 'q, q_grad, energy, p_accept')

Subtree = namedtuple('Subtree', 'left, right, p_sum, proposal, log_size, accept_sum, n_proposals')

class _Tree:
    ndim: Any = ...
    integrator: Any = ...
    start: Any = ...
    step_size: Any = ...
    Emax: Any = ...
    start_energy: Any = ...
    left: Any = ...
    proposal: Any = ...
    depth: int = ...
    log_size: int = ...
    accept_sum: int = ...
    n_proposals: int = ...
    p_sum: Any = ...
    max_energy_change: int = ...
    def __init__(self, ndim: Any, integrator: Any, start: Any, step_size: Any, Emax: Any) -> None: ...
    right: Any = ...
    def extend(self, direction: Any): ...
    def _single_step(self, left: Any, epsilon: Any): ...
    def _build_subtree(self, left: Any, depth: Any, epsilon: Any): ...
    def stats(self): ...
