# Stubs for pymc3.step_methods.smc (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..backends import smc_text as atext
from typing import Any, Optional

class SMC(atext.ArrayStepSharedLLK):
    default_blocked: bool = ...
    covariance: Any = ...
    vars: Any = ...
    proposal_name: Any = ...
    proposal_dist: Any = ...
    scaling: Any = ...
    check_bnd: Any = ...
    tune_interval: Any = ...
    steps_until_tune: Any = ...
    population: Any = ...
    n_steps: Any = ...
    n_steps_final: Any = ...
    p_acc_rate: Any = ...
    stage_sample: int = ...
    accepted: int = ...
    beta: int = ...
    stage: int = ...
    chain_index: int = ...
    threshold: Any = ...
    likelihood_name: Any = ...
    _llk_index: Any = ...
    discrete: Any = ...
    any_discrete: Any = ...
    all_discrete: Any = ...
    logp_forw: Any = ...
    def __init__(self, vars: Optional[Any] = ..., out_vars: Optional[Any] = ..., n_steps: int = ..., scaling: float = ..., p_acc_rate: float = ..., covariance: Optional[Any] = ..., likelihood_name: str = ..., proposal_name: str = ..., tune_interval: int = ..., threshold: float = ..., check_bound: bool = ..., model: Optional[Any] = ..., random_seed: int = ...) -> None: ...
    proposal_samples_array: Any = ...
    def astep(self, q0: Any): ...
    def calc_beta(self): ...
    def calc_covariance(self): ...
    def select_end_points(self, mtrace: Any, chains: Any): ...
    def get_chain_previous_lpoint(self, mtrace: Any, chains: Any): ...
    def mean_end_points(self): ...
    def resample(self, chains: Any): ...

def sample_smc(samples: int = ..., chains: int = ..., step: Optional[Any] = ..., start: Optional[Any] = ..., homepath: Optional[Any] = ..., stage: int = ..., cores: int = ..., progressbar: bool = ..., model: Optional[Any] = ..., random_seed: int = ..., rm_flag: bool = ..., **kwargs: Any): ...
