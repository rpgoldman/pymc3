# Stubs for pymc3.step_methods.arraystep (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from enum import IntEnum
from typing import Any, Optional

class Competence(IntEnum):
    INCOMPATIBLE: int = ...
    COMPATIBLE: int = ...
    PREFERRED: int = ...
    IDEAL: int = ...

class BlockedStep:
    generates_stats: bool = ...
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __getnewargs_ex__(self): ...
    @staticmethod
    def competence(var: Any, has_grad: Any): ...
    @classmethod
    def _competence(cls, vars: Any, have_grad: Any): ...
    @property
    def vars_shape_dtype(self): ...
    tune: bool = ...
    def stop_tuning(self) -> None: ...

class ArrayStep(BlockedStep):
    vars: Any = ...
    ordering: Any = ...
    fs: Any = ...
    allvars: Any = ...
    blocked: Any = ...
    def __init__(self, vars: Any, fs: Any, allvars: bool = ..., blocked: bool = ...) -> None: ...
    def step(self, point: Any): ...

class ArrayStepShared(BlockedStep):
    vars: Any = ...
    ordering: Any = ...
    shared: Any = ...
    blocked: Any = ...
    bij: Any = ...
    def __init__(self, vars: Any, shared: Any, blocked: bool = ...) -> None: ...
    def step(self, point: Any): ...

class PopulationArrayStepShared(ArrayStepShared):
    population: Any = ...
    this_chain: Any = ...
    other_chains: Any = ...
    def __init__(self, vars: Any, shared: Any, blocked: bool = ...) -> None: ...
    def link_population(self, population: Any, chain_index: Any): ...

class GradientSharedStep(BlockedStep):
    vars: Any = ...
    blocked: Any = ...
    _logp_dlogp_func: Any = ...
    def __init__(self, vars: Any, model: Optional[Any] = ..., blocked: bool = ..., dtype: Optional[Any] = ..., **theano_kwargs: Any) -> None: ...
    def step(self, point: Any): ...

def metrop_select(mr: Any, q: Any, q0: Any): ...
