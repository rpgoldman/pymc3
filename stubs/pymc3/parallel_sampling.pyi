# Stubs for pymc3.parallel_sampling (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import multiprocessing.sharedctypes
from collections import namedtuple
from typing import Any, Optional

logger: Any

class RemoteTraceback(Exception):
    tb: Any = ...
    def __init__(self, tb: Any) -> None: ...
    def __str__(self): ...

class ExceptionWithTraceback:
    exc: Any = ...
    tb: Any = ...
    def __init__(self, exc: Any, tb: Any) -> None: ...
    def __reduce__(self): ...

def rebuild_exc(exc: Any, tb: Any): ...

class _Process(multiprocessing.Process):
    _msg_pipe: Any = ...
    _step_method: Any = ...
    _shared_point: Any = ...
    _seed: Any = ...
    _tt_seed: Any = ...
    _draws: Any = ...
    _tune: Any = ...
    def __init__(self, name: Any, msg_pipe: Any, step_method: Any, shared_point: Any, draws: Any, tune: Any, seed: Any) -> None: ...
    _point: Any = ...
    def run(self) -> None: ...
    def _make_numpy_refs(self): ...
    def _write_point(self, point: Any) -> None: ...
    def _recv_msg(self): ...
    def _start_loop(self): ...
    def _compute_point(self): ...
    def _collect_warnings(self): ...

class ProcessAdapter:
    chain: Any = ...
    _shared_point: Any = ...
    _point: Any = ...
    _readable: bool = ...
    _num_samples: int = ...
    _process: Any = ...
    def __init__(self, draws: Any, tune: Any, step_method: Any, chain: Any, seed: Any, start: Any) -> None: ...
    @property
    def shared_point_view(self): ...
    def start(self) -> None: ...
    def write_next(self) -> None: ...
    def abort(self) -> None: ...
    def join(self, timeout: Optional[Any] = ...) -> None: ...
    def terminate(self) -> None: ...
    @staticmethod
    def recv_draw(processes: Any, timeout: int = ...): ...
    @staticmethod
    def terminate_all(processes: Any, patience: int = ...) -> None: ...

Draw = namedtuple('Draw', ['chain', 'is_last', 'draw_idx', 'tuning', 'stats', 'point', 'warnings'])

class ParallelSampler:
    _samplers: Any = ...
    _inactive: Any = ...
    _finished: Any = ...
    _active: Any = ...
    _max_active: Any = ...
    _in_context: bool = ...
    _start_chain_num: Any = ...
    _progress: Any = ...
    def __init__(self, draws: Any, tune: Any, chains: Any, cores: Any, seeds: Any, start_points: Any, step_method: Any, start_chain_num: int = ..., progressbar: bool = ...) -> None: ...
    def _make_active(self) -> None: ...
    def __iter__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...
