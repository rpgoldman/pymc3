# Stubs for pymc3.backends.hdf5 (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..backends import base, ndarray
from typing import Any, Optional

def activator(instance: Any): ...

class HDF5(base.BaseTrace):
    supports_sampler_stats: bool = ...
    hdf5_file: Any = ...
    draw_idx: int = ...
    draws: Any = ...
    def __init__(self, name: Optional[Any] = ..., model: Optional[Any] = ..., vars: Optional[Any] = ..., test_point: Optional[Any] = ...) -> None: ...
    def _get_sampler_stats(self, varname: Any, sampler_idx: Any, burn: Any, thin: Any): ...
    @property
    def activate_file(self): ...
    @property
    def samples(self): ...
    @property
    def stats(self): ...
    @property
    def chains(self): ...
    @property
    def is_new_file(self): ...
    @property
    def chain_is_setup(self): ...
    @property
    def nchains(self): ...
    @property
    def records_stats(self) -> bool: ...
    @records_stats.setter
    def records_stats(self, v: bool) -> None: ...
    def _resize(self, n: Any) -> None: ...
    @property
    def sampler_vars(self): ...
    @sampler_vars.setter
    def sampler_vars(self, values: Any): ...
    chain: Any = ...
    _is_base_setup: bool = ...
    def setup(self, draws: Any, chain: Any, sampler_vars: Optional[Any] = ...) -> None: ...
    def close(self): ...
    def record(self, point: Any, sampler_stats: Optional[Any] = ...) -> None: ...
    def get_values(self, varname: Any, burn: int = ..., thin: int = ...): ...
    def _slice(self, idx: Any): ...
    def point(self, idx: Any): ...
    def __len__(self): ...

def load(name: Any, model: Optional[Any] = ...): ...
