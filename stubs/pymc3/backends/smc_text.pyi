# Stubs for pymc3.backends.smc_text (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..backends import base, ndarray
from ..blocking import ArrayOrdering, DictToArrayBijection, ListArrayOrdering, ListToArrayBijection
from ..model import modelcontext
from ..step_methods.arraystep import BlockedStep
from typing import Any, Optional

def paripool(function: Any, work: Any, nprocs: Optional[Any] = ..., chunksize: int = ...) -> None: ...

class ArrayStepSharedLLK(BlockedStep):
    vars: Any = ...
    ordering: Any = ...
    lordering: Any = ...
    shared: Any = ...
    blocked: Any = ...
    bij: Any = ...
    lij: Any = ...
    def __init__(self, vars: Any, out_vars: Any, shared: Any, blocked: bool = ...) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any) -> None: ...
    def step(self, point: Any): ...

class BaseSMCTrace:
    name: Any = ...
    model: Any = ...
    vars: Any = ...
    varnames: Any = ...
    var_shapes_list: Any = ...
    var_dtypes_list: Any = ...
    var_shapes: Any = ...
    var_dtypes: Any = ...
    chain: Any = ...
    def __init__(self, name: Any, model: Optional[Any] = ..., vars: Optional[Any] = ...) -> None: ...
    def __getitem__(self, idx: Any): ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any) -> None: ...

class TextStage:
    base_dir: Any = ...
    project_dir: Any = ...
    mode: Any = ...
    def __init__(self, base_dir: Any) -> None: ...
    def stage_path(self, stage: Any): ...
    def stage_number(self, stage_path: Any): ...
    def highest_sampled_stage(self): ...
    def atmip_path(self, stage_number: Any): ...
    def load_atmip_params(self, stage_number: Any, model: Any): ...
    def dump_atmip_params(self, step: Any) -> None: ...
    def clean_directory(self, stage: Any, chains: Any, rm_flag: Any): ...
    def load_multitrace(self, stage_number: Any, model: Optional[Any] = ...): ...
    def check_multitrace(self, mtrace: Any, draws: Any, n_chains: Any): ...
    def recover_existing_results(self, stage_number: Any, draws: Any, chains: Any, step: Any, model: Optional[Any] = ...): ...
    def create_result_trace(self, stage_number: int = ..., idxs: Any = ..., step: Optional[Any] = ..., model: Optional[Any] = ...): ...
    def load_result_trace(self, model: Optional[Any] = ...): ...

class TextChain(BaseSMCTrace):
    flat_names: Any = ...
    filename: Any = ...
    df: Any = ...
    corrupted_flag: bool = ...
    def __init__(self, name: Any, model: Optional[Any] = ..., vars: Optional[Any] = ...) -> None: ...
    chain: Any = ...
    def setup(self, draws: Any, chain: Any) -> None: ...
    def record(self, lpoint: Any) -> None: ...
    def _load_df(self) -> None: ...
    def __len__(self): ...
    def get_values(self, varname: Any, burn: int = ..., thin: int = ...): ...
    def _slice(self, idx: Any): ...
    def point(self, idx: Any): ...
