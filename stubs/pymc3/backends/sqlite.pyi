# Stubs for pymc3.backends.sqlite (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..backends import base, ndarray
from typing import Any, Optional

TEMPLATES: Any

class SQLite(base.BaseTrace):
    _var_cols: Any = ...
    var_inserts: Any = ...
    draw_idx: int = ...
    _is_setup: bool = ...
    _len: Any = ...
    db: Any = ...
    _queue: Any = ...
    _queue_limit: int = ...
    def __init__(self, name: Any, model: Optional[Any] = ..., vars: Optional[Any] = ..., test_point: Optional[Any] = ...) -> None: ...
    chain: Any = ...
    # note that the sampler_vars argument isn't actually supported here -- it's just supplied for compatibility with superclass
    def setup(self, draws: Any, chain: Any, sampler_vars: Optional[None] = None) -> None: ...
    def _create_table(self) -> None: ...
    def _create_insert_queries(self) -> None: ...
    def record(self, point: Any, sampler_states: Optional[None]=None) -> None: ...
    def _execute_queue(self) -> None: ...
    def close(self) -> None: ...
    def __len__(self): ...
    def _get_number_draws(self): ...
    def _get_max_draw(self, chain: Any): ...
    def get_values(self, varname: Any, burn: int = ..., thin: int = ...): ...
    def _slice(self, idx: Any): ...
    def point(self, idx: Any): ...

class _SQLiteDB:
    name: Any = ...
    con: Any = ...
    cursor: Any = ...
    connected: bool = ...
    def __init__(self, name: Any) -> None: ...
    def connect(self): ...
    def close(self): ...

def load(name: Any, model: Optional[Any] = ...): ...
def _get_table_list(cursor: Any): ...
def _get_var_strs(cursor: Any, varname: Any): ...
def _get_chain_list(cursor: Any, varname: Any): ...
def _rows_to_ndarray(cursor: Any): ...
