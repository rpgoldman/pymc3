# Stubs for pymc3.backends.ndarray (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
from ..model import Model
from ..backends import base
from typing import Any, Optional, Union

def save_trace(trace: Union[base.BaseTrace,base.MultiTrace], directory: Optional[str] = ..., overwrite: bool = ...) -> None: ...
def load_trace(directory: str, model: Optional[Model] = ...): ...

class SerializeNDArray:
    metadata_file: str = ...
    samples_file: str = ...
    directory: Any = ...
    metadata_path: Any = ...
    samples_path: Any = ...
    def __init__(self, directory: str) -> None: ...
    @staticmethod
    def to_metadata(ndarray: Any): ...
    def save(self, ndarray: Any) -> None: ...
    def load(self, model: Model) -> base.MultiTrace: ...

class NDArray(base.BaseTrace):
    supports_sampler_stats: bool = ...
    draw_idx: int = ...
    draws: Any = ...
    samples: Any = ...
    _stats: Any = ...
    def __init__(self, name: Optional[Any] = ..., model: Optional[Any] = ..., vars: Optional[Any] = ..., test_point: Optional[Any] = ...) -> None: ...
    chain: Any = ...
    def setup(self, draws: Any, chain: Any, sampler_vars: Optional[Any] = ...): ...
    def record(self, point: Any, sampler_stats: Optional[Any] = ...) -> None: ...
    def _get_sampler_stats(self, varname: Any, sampler_idx: Any, burn: Any, thin: Any): ...
    def close(self): ...
    def __len__(self): ...
    def get_values(self, varname: Any, burn: int = ..., thin: int = ...): ...
    def _slice(self, idx: Any): ...
    def point(self, idx: Any): ...

def _slice_as_ndarray(strace: Any, idx: Any): ...
