# Stubs for pymc3.gp.cov (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class Covariance:
    input_dim: Any = ...
    active_dims: Any = ...
    def __init__(self, input_dim: Any, active_dims: Optional[Any] = ...) -> None: ...
    def __call__(self, X: Any, Xs: Optional[Any] = ..., diag: bool = ...): ...
    def diag(self, X: Any) -> None: ...
    def full(self, X: Any, Xs: Any) -> None: ...
    def _slice(self, X: Any, Xs: Any): ...
    def __add__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __array_wrap__(self, result: Any): ...

class Combination(Covariance):
    factor_list: Any = ...
    def __init__(self, factor_list: Any) -> None: ...
    def merge_factors(self, X: Any, Xs: Optional[Any] = ..., diag: bool = ...): ...

class Add(Combination):
    def __call__(self, X: Any, Xs: Optional[Any] = ..., diag: bool = ...): ...

class Prod(Combination):
    def __call__(self, X: Any, Xs: Optional[Any] = ..., diag: bool = ...): ...

class Kron(Covariance):
    input_dims: Any = ...
    factor_list: Any = ...
    def __init__(self, factor_list: Any) -> None: ...
    def _split(self, X: Any, Xs: Any): ...
    def __call__(self, X: Any, Xs: Optional[Any] = ..., diag: bool = ...): ...

class Constant(Covariance):
    c: Any = ...
    def __init__(self, c: Any) -> None: ...
    def diag(self, X: Any): ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class WhiteNoise(Covariance):
    sigma: Any = ...
    def __init__(self, sigma: Any) -> None: ...
    def diag(self, X: Any): ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class Stationary(Covariance):
    ls: Any = ...
    def __init__(self, input_dim: Any, ls: Optional[Any] = ..., ls_inv: Optional[Any] = ..., active_dims: Optional[Any] = ...) -> None: ...
    def square_dist(self, X: Any, Xs: Any): ...
    def euclidean_dist(self, X: Any, Xs: Any): ...
    def diag(self, X: Any): ...
    def full(self, X: Any, Xs: Optional[Any] = ...) -> None: ...

class Periodic(Stationary):
    period: Any = ...
    def __init__(self, input_dim: Any, period: Any, ls: Optional[Any] = ..., ls_inv: Optional[Any] = ..., active_dims: Optional[Any] = ...) -> None: ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class ExpQuad(Stationary):
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class RatQuad(Stationary):
    alpha: Any = ...
    def __init__(self, input_dim: Any, alpha: Any, ls: Optional[Any] = ..., ls_inv: Optional[Any] = ..., active_dims: Optional[Any] = ...) -> None: ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class Matern52(Stationary):
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class Matern32(Stationary):
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class Exponential(Stationary):
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class Cosine(Stationary):
    def full(self, X: Any, Xs: Optional[Any] = ...): ...

class Linear(Covariance):
    c: Any = ...
    def __init__(self, input_dim: Any, c: Any, active_dims: Optional[Any] = ...) -> None: ...
    def _common(self, X: Any, Xs: Optional[Any] = ...): ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...
    def diag(self, X: Any): ...

class Polynomial(Linear):
    d: Any = ...
    offset: Any = ...
    def __init__(self, input_dim: Any, c: Any, d: Any, offset: Any, active_dims: Optional[Any] = ...) -> None: ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...
    def diag(self, X: Any): ...

class WarpedInput(Covariance):
    w: Any = ...
    args: Any = ...
    cov_func: Any = ...
    def __init__(self, input_dim: Any, cov_func: Any, warp_func: Any, args: Optional[Any] = ..., active_dims: Optional[Any] = ...) -> None: ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...
    def diag(self, X: Any): ...

class Gibbs(Covariance):
    lfunc: Any = ...
    args: Any = ...
    def __init__(self, input_dim: Any, lengthscale_func: Any, args: Optional[Any] = ..., active_dims: Optional[Any] = ...) -> None: ...
    def square_dist(self, X: Any, Xs: Optional[Any] = ...): ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...
    def diag(self, X: Any): ...

class Coregion(Covariance):
    W: Any = ...
    kappa: Any = ...
    B: Any = ...
    def __init__(self, input_dim: Any, W: Optional[Any] = ..., kappa: Optional[Any] = ..., B: Optional[Any] = ..., active_dims: Optional[Any] = ...) -> None: ...
    def full(self, X: Any, Xs: Optional[Any] = ...): ...
    def diag(self, X: Any): ...
