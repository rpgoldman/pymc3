# Stubs for pymc3.gp.gp (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class Base:
    mean_func: Any = ...
    cov_func: Any = ...
    def __init__(self, mean_func: Any = ..., cov_func: Any = ...) -> None: ...
    def __add__(self, other: Any): ...
    def prior(self, name: Any, X: Any, *args: Any, **kwargs: Any) -> None: ...
    def marginal_likelihood(self, name: Any, X: Any, *args: Any, **kwargs: Any) -> None: ...
    def conditional(self, name: Any, Xnew: Any, *args: Any, **kwargs: Any) -> None: ...
    def predict(self, Xnew: Any, point: Optional[Any] = ..., given: Optional[Any] = ..., diag: bool = ...) -> None: ...

class Latent(Base):
    def __init__(self, mean_func: Any = ..., cov_func: Any = ...) -> None: ...
    def _build_prior(self, name: Any, X: Any, reparameterize: bool = ..., **kwargs: Any): ...
    X: Any = ...
    f: Any = ...
    def prior(self, name: Any, X: Any, reparameterize: bool = ..., **kwargs: Any): ...
    def _get_given_vals(self, given: Any): ...
    def _build_conditional(self, Xnew: Any, X: Any, f: Any, cov_total: Any, mean_total: Any): ...
    def conditional(self, name: Any, Xnew: Any, given: Optional[Any] = ..., **kwargs: Any): ...

class TP(Latent):
    nu: Any = ...
    def __init__(self, mean_func: Any = ..., cov_func: Any = ..., nu: Optional[Any] = ...) -> None: ...
    def __add__(self, other: Any) -> None: ...
    def _build_prior(self, name: Any, X: Any, reparameterize: bool = ..., **kwargs: Any): ...
    X: Any = ...
    f: Any = ...
    def prior(self, name: Any, X: Any, reparameterize: bool = ..., **kwargs: Any): ...
    def _build_conditional(self, Xnew: Any, X: Any, f: Any): ...
    def conditional(self, name: Any, Xnew: Any, **kwargs: Any): ...

class Marginal(Base):
    def __init__(self, mean_func: Any = ..., cov_func: Any = ...) -> None: ...
    def _build_marginal_likelihood(self, X: Any, noise: Any): ...
    X: Any = ...
    y: Any = ...
    noise: Any = ...
    def marginal_likelihood(self, name: Any, X: Any, y: Any, noise: Any, is_observed: bool = ..., **kwargs: Any): ...
    def _get_given_vals(self, given: Any): ...
    def _build_conditional(self, Xnew: Any, pred_noise: Any, diag: Any, X: Any, y: Any, noise: Any, cov_total: Any, mean_total: Any): ...
    def conditional(self, name: Any, Xnew: Any, pred_noise: bool = ..., given: Optional[Any] = ..., **kwargs: Any): ...
    def predict(self, Xnew: Any, point: Optional[Any] = ..., diag: bool = ..., pred_noise: bool = ..., given: Optional[Any] = ...): ...
    def predictt(self, Xnew: Any, diag: bool = ..., pred_noise: bool = ..., given: Optional[Any] = ...): ...

class MarginalSparse(Marginal):
    _available_approx: Any = ...
    approx: Any = ...
    def __init__(self, mean_func: Any = ..., cov_func: Any = ..., approx: str = ...) -> None: ...
    def __add__(self, other: Any): ...
    def _build_marginal_likelihood_logp(self, y: Any, X: Any, Xu: Any, sigma: Any): ...
    X: Any = ...
    Xu: Any = ...
    y: Any = ...
    sigma: Any = ...
    def marginal_likelihood(self, name: Any, X: Any, Xu: Any, y: Any, noise: Optional[Any] = ..., is_observed: bool = ..., **kwargs: Any): ...
    def _build_conditional(self, Xnew: Any, pred_noise: Any, diag: Any, X: Any, Xu: Any, y: Any, sigma: Any, cov_total: Any, mean_total: Any): ...
    def _get_given_vals(self, given: Any): ...
    def conditional(self, name: Any, Xnew: Any, pred_noise: bool = ..., given: Optional[Any] = ..., **kwargs: Any): ...

class MarginalKron(Base):
    cov_funcs: Any = ...
    def __init__(self, mean_func: Any = ..., cov_funcs: Any = ...) -> None: ...
    def __add__(self, other: Any) -> None: ...
    X: Any = ...
    def _build_marginal_likelihood(self, Xs: Any): ...
    def _check_inputs(self, Xs: Any, y: Any, sigma: Any) -> None: ...
    Xs: Any = ...
    y: Any = ...
    sigma: Any = ...
    def marginal_likelihood(self, name: Any, Xs: Any, y: Any, sigma: Any, is_observed: bool = ..., **kwargs: Any): ...
    def _build_conditional(self, Xnew: Any, pred_noise: Any, diag: Any): ...
    def conditional(self, name: Any, Xnew: Any, pred_noise: bool = ..., **kwargs: Any): ...
    def predict(self, Xnew: Any, point: Optional[Any] = ..., diag: bool = ..., pred_noise: bool = ...): ...
    def predictt(self, Xnew: Any, diag: bool = ..., pred_noise: bool = ...): ...
